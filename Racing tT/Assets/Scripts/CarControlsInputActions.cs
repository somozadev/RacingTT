//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/CarControlsInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarControlsInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarControlsInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarControlsInputActions"",
    ""maps"": [
        {
            ""name"": ""CarControls"",
            ""id"": ""a396384f-3b8a-4f2e-bf83-226eaec8424d"",
            ""actions"": [
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Value"",
                    ""id"": ""7c3cfa80-7667-49ad-817e-ac712cdafc4a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReverseAcceleration"",
                    ""type"": ""Value"",
                    ""id"": ""e4c26232-d2e7-457f-b4ab-60ee6e6dcbdd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""84162f3a-e02b-4440-8e0e-810aa20bfecb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reseting"",
                    ""type"": ""Button"",
                    ""id"": ""9c7a5487-d4b3-4278-8768-95f705c1a98d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lights"",
                    ""type"": ""Button"",
                    ""id"": ""f9f3824e-8b14-4610-ba4c-bd8a63765ae4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Claxon"",
                    ""type"": ""Button"",
                    ""id"": ""4c2938b7-abe1-4069-81e4-75a951a99216"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3bc074a-4f38-43b2-95d4-b775491e3e76"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a1ea6e3-df05-4ecb-91da-8ea080e1eeea"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b8fe890-b9df-4fa3-9f7d-9978d9d14790"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReverseAcceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19735ae5-5063-43d8-9535-88f8cc67ac66"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReverseAcceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""a6381c63-fc4b-4519-a00b-f4a4c9ef058b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8648385c-7768-45b4-8ff2-caef9d4fb3b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0cc73a14-68ea-4797-8e69-ccceae335faf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Stick"",
                    ""id"": ""4f6cea40-ffd5-4b11-a2cf-e63aad7ede9e"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1559c2bc-6258-4cd3-889b-0c164a120b91"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""985a7ec5-b02a-4029-a18b-2a67d67dafa0"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""99fd0af4-c145-4151-a9b0-2620f3909073"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a248cc7-603f-4700-a12a-436c56d924ad"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ce70cc6a-25d9-432c-b627-32e849a073d9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reseting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4da0ae2-4e82-4f2c-824b-97fd62d8f4e9"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reseting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7614e98c-18c5-40ad-934a-9320e6d59285"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lights"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58c12c1b-f79c-4a36-ac74-a4acd49aa4de"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Claxon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": []
        }
    ]
}");
        // CarControls
        m_CarControls = asset.FindActionMap("CarControls", throwIfNotFound: true);
        m_CarControls_Acceleration = m_CarControls.FindAction("Acceleration", throwIfNotFound: true);
        m_CarControls_ReverseAcceleration = m_CarControls.FindAction("ReverseAcceleration", throwIfNotFound: true);
        m_CarControls_Steering = m_CarControls.FindAction("Steering", throwIfNotFound: true);
        m_CarControls_Reseting = m_CarControls.FindAction("Reseting", throwIfNotFound: true);
        m_CarControls_Lights = m_CarControls.FindAction("Lights", throwIfNotFound: true);
        m_CarControls_Claxon = m_CarControls.FindAction("Claxon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarControls
    private readonly InputActionMap m_CarControls;
    private List<ICarControlsActions> m_CarControlsActionsCallbackInterfaces = new List<ICarControlsActions>();
    private readonly InputAction m_CarControls_Acceleration;
    private readonly InputAction m_CarControls_ReverseAcceleration;
    private readonly InputAction m_CarControls_Steering;
    private readonly InputAction m_CarControls_Reseting;
    private readonly InputAction m_CarControls_Lights;
    private readonly InputAction m_CarControls_Claxon;
    public struct CarControlsActions
    {
        private @CarControlsInputActions m_Wrapper;
        public CarControlsActions(@CarControlsInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acceleration => m_Wrapper.m_CarControls_Acceleration;
        public InputAction @ReverseAcceleration => m_Wrapper.m_CarControls_ReverseAcceleration;
        public InputAction @Steering => m_Wrapper.m_CarControls_Steering;
        public InputAction @Reseting => m_Wrapper.m_CarControls_Reseting;
        public InputAction @Lights => m_Wrapper.m_CarControls_Lights;
        public InputAction @Claxon => m_Wrapper.m_CarControls_Claxon;
        public InputActionMap Get() { return m_Wrapper.m_CarControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICarControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CarControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarControlsActionsCallbackInterfaces.Add(instance);
            @Acceleration.started += instance.OnAcceleration;
            @Acceleration.performed += instance.OnAcceleration;
            @Acceleration.canceled += instance.OnAcceleration;
            @ReverseAcceleration.started += instance.OnReverseAcceleration;
            @ReverseAcceleration.performed += instance.OnReverseAcceleration;
            @ReverseAcceleration.canceled += instance.OnReverseAcceleration;
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @Reseting.started += instance.OnReseting;
            @Reseting.performed += instance.OnReseting;
            @Reseting.canceled += instance.OnReseting;
            @Lights.started += instance.OnLights;
            @Lights.performed += instance.OnLights;
            @Lights.canceled += instance.OnLights;
            @Claxon.started += instance.OnClaxon;
            @Claxon.performed += instance.OnClaxon;
            @Claxon.canceled += instance.OnClaxon;
        }

        private void UnregisterCallbacks(ICarControlsActions instance)
        {
            @Acceleration.started -= instance.OnAcceleration;
            @Acceleration.performed -= instance.OnAcceleration;
            @Acceleration.canceled -= instance.OnAcceleration;
            @ReverseAcceleration.started -= instance.OnReverseAcceleration;
            @ReverseAcceleration.performed -= instance.OnReverseAcceleration;
            @ReverseAcceleration.canceled -= instance.OnReverseAcceleration;
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @Reseting.started -= instance.OnReseting;
            @Reseting.performed -= instance.OnReseting;
            @Reseting.canceled -= instance.OnReseting;
            @Lights.started -= instance.OnLights;
            @Lights.performed -= instance.OnLights;
            @Lights.canceled -= instance.OnLights;
            @Claxon.started -= instance.OnClaxon;
            @Claxon.performed -= instance.OnClaxon;
            @Claxon.canceled -= instance.OnClaxon;
        }

        public void RemoveCallbacks(ICarControlsActions instance)
        {
            if (m_Wrapper.m_CarControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CarControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarControlsActions @CarControls => new CarControlsActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface ICarControlsActions
    {
        void OnAcceleration(InputAction.CallbackContext context);
        void OnReverseAcceleration(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnReseting(InputAction.CallbackContext context);
        void OnLights(InputAction.CallbackContext context);
        void OnClaxon(InputAction.CallbackContext context);
    }
}
